// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import * as path from 'path';

import {Transform} from 'stream';
import {RequestType} from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import * as gapicConfig from './os_config_service_client_config.json';

const version = require('../../../package.json').version;

/**
 *  OS Config API
 *
 *  The OS Config service is a server-side component that you can use to
 *  manage package installations and patch jobs for virtual machine instances.
 * @class
 * @memberof v1
 */
export class OsConfigServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  osConfigServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of OsConfigServiceClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof OsConfigServiceClient;
    const servicePath =
      opts && opts.servicePath
        ? opts.servicePath
        : opts && opts.apiEndpoint
        ? opts.apiEndpoint
        : staticMembers.servicePath;
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;

    // users can override the config from client side, like retry codes name.
    // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/master/src/gax.ts#L546
    // The way to override client config for Showcase API:
    //
    // const customConfig = {"interfaces": {"google.showcase.v1beta1.Echo": {"methods": {"Echo": {"retry_codes_name": "idempotent", "retry_params_name": "default"}}}}}
    // const showcaseClient = new showcaseClient({ projectId, customConfig });
    opts.clientConfig = opts.clientConfig || {};

    // If we're running in browser, it's OK to omit `fallback` since
    // google-gax has `browser` field in its `package.json`.
    // For Electron (which does not respect `browser` field),
    // pass `{fallback: true}` to the OsConfigServiceClient constructor.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof OsConfigServiceClient).scopes;
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(
      __dirname,
      '..',
      '..',
      'protos',
      'protos.json'
    );
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback
        ? // eslint-disable-next-line @typescript-eslint/no-var-requires
          require('../../protos/protos.json')
        : nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      patchDeploymentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/patchDeployments/{patch_deployment}'
      ),
      patchJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/patchJobs/{patch_job}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listPatchJobs: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'patchJobs'
      ),
      listPatchJobInstanceDetails: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'patchJobInstanceDetails'
      ),
      listPatchDeployments: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'patchDeployments'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.osconfig.v1.OsConfigService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.osConfigServiceStub) {
      return this.osConfigServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.osconfig.v1.OsConfigService.
    this.osConfigServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.osconfig.v1.OsConfigService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.osconfig.v1.OsConfigService,
      this._opts
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const osConfigServiceStubMethods = [
      'executePatchJob',
      'getPatchJob',
      'cancelPatchJob',
      'listPatchJobs',
      'listPatchJobInstanceDetails',
      'createPatchDeployment',
      'getPatchDeployment',
      'listPatchDeployments',
      'deletePatchDeployment',
    ];
    for (const methodName of osConfigServiceStubMethods) {
      const callPromise = this.osConfigServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        this.descriptors.page[methodName] ||
          this.descriptors.stream[methodName] ||
          this.descriptors.longrunning[methodName]
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.osConfigServiceStub;
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'osconfig.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'osconfig.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  executePatchJob(
    request: protos.google.cloud.osconfig.v1.IExecutePatchJobRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.osconfig.v1.IPatchJob,
      protos.google.cloud.osconfig.v1.IExecutePatchJobRequest | undefined,
      {} | undefined
    ]
  >;
  executePatchJob(
    request: protos.google.cloud.osconfig.v1.IExecutePatchJobRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.osconfig.v1.IPatchJob,
      | protos.google.cloud.osconfig.v1.IExecutePatchJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  executePatchJob(
    request: protos.google.cloud.osconfig.v1.IExecutePatchJobRequest,
    callback: Callback<
      protos.google.cloud.osconfig.v1.IPatchJob,
      | protos.google.cloud.osconfig.v1.IExecutePatchJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Patch VM instances by creating and running a patch job.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project in which to run this patch in the form `projects/*`
   * @param {string} request.description
   *   Description of the patch job. Length of the description is limited
   *   to 1024 characters.
   * @param {google.cloud.osconfig.v1.PatchInstanceFilter} request.instanceFilter
   *   Required. Instances to patch, either explicitly or filtered by some criteria such
   *   as zone or labels.
   * @param {google.cloud.osconfig.v1.PatchConfig} request.patchConfig
   *   Patch configuration being applied. If omitted, instances are
   *   patched using the default configurations.
   * @param {google.protobuf.Duration} request.duration
   *   Duration of the patch job. After the duration ends, the patch job
   *   times out.
   * @param {boolean} request.dryRun
   *   If this patch is a dry-run only, instances are contacted but
   *   will do nothing.
   * @param {string} request.displayName
   *   Display name for this patch job. This does not have to be unique.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [PatchJob]{@link google.cloud.osconfig.v1.PatchJob}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  executePatchJob(
    request: protos.google.cloud.osconfig.v1.IExecutePatchJobRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.osconfig.v1.IPatchJob,
          | protos.google.cloud.osconfig.v1.IExecutePatchJobRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.osconfig.v1.IPatchJob,
      | protos.google.cloud.osconfig.v1.IExecutePatchJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.osconfig.v1.IPatchJob,
      protos.google.cloud.osconfig.v1.IExecutePatchJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.executePatchJob(request, options, callback);
  }
  getPatchJob(
    request: protos.google.cloud.osconfig.v1.IGetPatchJobRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.osconfig.v1.IPatchJob,
      protos.google.cloud.osconfig.v1.IGetPatchJobRequest | undefined,
      {} | undefined
    ]
  >;
  getPatchJob(
    request: protos.google.cloud.osconfig.v1.IGetPatchJobRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.osconfig.v1.IPatchJob,
      protos.google.cloud.osconfig.v1.IGetPatchJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getPatchJob(
    request: protos.google.cloud.osconfig.v1.IGetPatchJobRequest,
    callback: Callback<
      protos.google.cloud.osconfig.v1.IPatchJob,
      protos.google.cloud.osconfig.v1.IGetPatchJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Get the patch job. This can be used to track the progress of an
   * ongoing patch job or review the details of completed jobs.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the patch in the form `projects/* /patchJobs/*`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [PatchJob]{@link google.cloud.osconfig.v1.PatchJob}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getPatchJob(
    request: protos.google.cloud.osconfig.v1.IGetPatchJobRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.osconfig.v1.IPatchJob,
          | protos.google.cloud.osconfig.v1.IGetPatchJobRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.osconfig.v1.IPatchJob,
      protos.google.cloud.osconfig.v1.IGetPatchJobRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.osconfig.v1.IPatchJob,
      protos.google.cloud.osconfig.v1.IGetPatchJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getPatchJob(request, options, callback);
  }
  cancelPatchJob(
    request: protos.google.cloud.osconfig.v1.ICancelPatchJobRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.osconfig.v1.IPatchJob,
      protos.google.cloud.osconfig.v1.ICancelPatchJobRequest | undefined,
      {} | undefined
    ]
  >;
  cancelPatchJob(
    request: protos.google.cloud.osconfig.v1.ICancelPatchJobRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.osconfig.v1.IPatchJob,
      protos.google.cloud.osconfig.v1.ICancelPatchJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  cancelPatchJob(
    request: protos.google.cloud.osconfig.v1.ICancelPatchJobRequest,
    callback: Callback<
      protos.google.cloud.osconfig.v1.IPatchJob,
      protos.google.cloud.osconfig.v1.ICancelPatchJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Cancel a patch job. The patch job must be active. Canceled patch jobs
   * cannot be restarted.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the patch in the form `projects/* /patchJobs/*`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [PatchJob]{@link google.cloud.osconfig.v1.PatchJob}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  cancelPatchJob(
    request: protos.google.cloud.osconfig.v1.ICancelPatchJobRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.osconfig.v1.IPatchJob,
          | protos.google.cloud.osconfig.v1.ICancelPatchJobRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.osconfig.v1.IPatchJob,
      protos.google.cloud.osconfig.v1.ICancelPatchJobRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.osconfig.v1.IPatchJob,
      protos.google.cloud.osconfig.v1.ICancelPatchJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.cancelPatchJob(request, options, callback);
  }
  createPatchDeployment(
    request: protos.google.cloud.osconfig.v1.ICreatePatchDeploymentRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.osconfig.v1.IPatchDeployment,
      protos.google.cloud.osconfig.v1.ICreatePatchDeploymentRequest | undefined,
      {} | undefined
    ]
  >;
  createPatchDeployment(
    request: protos.google.cloud.osconfig.v1.ICreatePatchDeploymentRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.osconfig.v1.IPatchDeployment,
      | protos.google.cloud.osconfig.v1.ICreatePatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createPatchDeployment(
    request: protos.google.cloud.osconfig.v1.ICreatePatchDeploymentRequest,
    callback: Callback<
      protos.google.cloud.osconfig.v1.IPatchDeployment,
      | protos.google.cloud.osconfig.v1.ICreatePatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Create an OS Config patch deployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project to apply this patch deployment to in the form `projects/*`.
   * @param {string} request.patchDeploymentId
   *   Required. A name for the patch deployment in the project. When creating a name
   *   the following rules apply:
   *   * Must contain only lowercase letters, numbers, and hyphens.
   *   * Must start with a letter.
   *   * Must be between 1-63 characters.
   *   * Must end with a number or a letter.
   *   * Must be unique within the project.
   * @param {google.cloud.osconfig.v1.PatchDeployment} request.patchDeployment
   *   Required. The patch deployment to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [PatchDeployment]{@link google.cloud.osconfig.v1.PatchDeployment}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createPatchDeployment(
    request: protos.google.cloud.osconfig.v1.ICreatePatchDeploymentRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.osconfig.v1.IPatchDeployment,
          | protos.google.cloud.osconfig.v1.ICreatePatchDeploymentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.osconfig.v1.IPatchDeployment,
      | protos.google.cloud.osconfig.v1.ICreatePatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.osconfig.v1.IPatchDeployment,
      protos.google.cloud.osconfig.v1.ICreatePatchDeploymentRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createPatchDeployment(request, options, callback);
  }
  getPatchDeployment(
    request: protos.google.cloud.osconfig.v1.IGetPatchDeploymentRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.osconfig.v1.IPatchDeployment,
      protos.google.cloud.osconfig.v1.IGetPatchDeploymentRequest | undefined,
      {} | undefined
    ]
  >;
  getPatchDeployment(
    request: protos.google.cloud.osconfig.v1.IGetPatchDeploymentRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.osconfig.v1.IPatchDeployment,
      | protos.google.cloud.osconfig.v1.IGetPatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPatchDeployment(
    request: protos.google.cloud.osconfig.v1.IGetPatchDeploymentRequest,
    callback: Callback<
      protos.google.cloud.osconfig.v1.IPatchDeployment,
      | protos.google.cloud.osconfig.v1.IGetPatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Get an OS Config patch deployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the patch deployment in the form
   *   `projects/* /patchDeployments/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [PatchDeployment]{@link google.cloud.osconfig.v1.PatchDeployment}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getPatchDeployment(
    request: protos.google.cloud.osconfig.v1.IGetPatchDeploymentRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.osconfig.v1.IPatchDeployment,
          | protos.google.cloud.osconfig.v1.IGetPatchDeploymentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.osconfig.v1.IPatchDeployment,
      | protos.google.cloud.osconfig.v1.IGetPatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.osconfig.v1.IPatchDeployment,
      protos.google.cloud.osconfig.v1.IGetPatchDeploymentRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getPatchDeployment(request, options, callback);
  }
  deletePatchDeployment(
    request: protos.google.cloud.osconfig.v1.IDeletePatchDeploymentRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.osconfig.v1.IDeletePatchDeploymentRequest | undefined,
      {} | undefined
    ]
  >;
  deletePatchDeployment(
    request: protos.google.cloud.osconfig.v1.IDeletePatchDeploymentRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.osconfig.v1.IDeletePatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deletePatchDeployment(
    request: protos.google.cloud.osconfig.v1.IDeletePatchDeploymentRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.osconfig.v1.IDeletePatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Delete an OS Config patch deployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the patch deployment in the form
   *   `projects/* /patchDeployments/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deletePatchDeployment(
    request: protos.google.cloud.osconfig.v1.IDeletePatchDeploymentRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.osconfig.v1.IDeletePatchDeploymentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.osconfig.v1.IDeletePatchDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.osconfig.v1.IDeletePatchDeploymentRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deletePatchDeployment(request, options, callback);
  }

  listPatchJobs(
    request: protos.google.cloud.osconfig.v1.IListPatchJobsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.osconfig.v1.IPatchJob[],
      protos.google.cloud.osconfig.v1.IListPatchJobsRequest | null,
      protos.google.cloud.osconfig.v1.IListPatchJobsResponse
    ]
  >;
  listPatchJobs(
    request: protos.google.cloud.osconfig.v1.IListPatchJobsRequest,
    options: gax.CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.osconfig.v1.IListPatchJobsRequest,
      protos.google.cloud.osconfig.v1.IListPatchJobsResponse | null | undefined,
      protos.google.cloud.osconfig.v1.IPatchJob
    >
  ): void;
  listPatchJobs(
    request: protos.google.cloud.osconfig.v1.IListPatchJobsRequest,
    callback: PaginationCallback<
      protos.google.cloud.osconfig.v1.IListPatchJobsRequest,
      protos.google.cloud.osconfig.v1.IListPatchJobsResponse | null | undefined,
      protos.google.cloud.osconfig.v1.IPatchJob
    >
  ): void;
  /**
   * Get a list of patch jobs.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. In the form of `projects/*`
   * @param {number} request.pageSize
   *   The maximum number of instance status to return.
   * @param {string} request.pageToken
   *   A pagination token returned from a previous call
   *   that indicates where this listing should continue from.
   * @param {string} request.filter
   *   If provided, this field specifies the criteria that must be met by patch
   *   jobs to be included in the response.
   *   Currently, filtering is only available on the patch_deployment field.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [PatchJob]{@link google.cloud.osconfig.v1.PatchJob}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [PatchJob]{@link google.cloud.osconfig.v1.PatchJob} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListPatchJobsRequest]{@link google.cloud.osconfig.v1.ListPatchJobsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListPatchJobsResponse]{@link google.cloud.osconfig.v1.ListPatchJobsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listPatchJobs(
    request: protos.google.cloud.osconfig.v1.IListPatchJobsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | PaginationCallback<
          protos.google.cloud.osconfig.v1.IListPatchJobsRequest,
          | protos.google.cloud.osconfig.v1.IListPatchJobsResponse
          | null
          | undefined,
          protos.google.cloud.osconfig.v1.IPatchJob
        >,
    callback?: PaginationCallback<
      protos.google.cloud.osconfig.v1.IListPatchJobsRequest,
      protos.google.cloud.osconfig.v1.IListPatchJobsResponse | null | undefined,
      protos.google.cloud.osconfig.v1.IPatchJob
    >
  ): Promise<
    [
      protos.google.cloud.osconfig.v1.IPatchJob[],
      protos.google.cloud.osconfig.v1.IListPatchJobsRequest | null,
      protos.google.cloud.osconfig.v1.IListPatchJobsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listPatchJobs(request, options, callback);
  }

  /**
   * Equivalent to {@link listPatchJobs}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listPatchJobs} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. In the form of `projects/*`
   * @param {number} request.pageSize
   *   The maximum number of instance status to return.
   * @param {string} request.pageToken
   *   A pagination token returned from a previous call
   *   that indicates where this listing should continue from.
   * @param {string} request.filter
   *   If provided, this field specifies the criteria that must be met by patch
   *   jobs to be included in the response.
   *   Currently, filtering is only available on the patch_deployment field.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [PatchJob]{@link google.cloud.osconfig.v1.PatchJob} on 'data' event.
   */
  listPatchJobsStream(
    request?: protos.google.cloud.osconfig.v1.IListPatchJobsRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listPatchJobs.createStream(
      this.innerApiCalls.listPatchJobs as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to {@link listPatchJobs}, but returns an iterable object.
   *
   * for-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. In the form of `projects/*`
   * @param {number} request.pageSize
   *   The maximum number of instance status to return.
   * @param {string} request.pageToken
   *   A pagination token returned from a previous call
   *   that indicates where this listing should continue from.
   * @param {string} request.filter
   *   If provided, this field specifies the criteria that must be met by patch
   *   jobs to be included in the response.
   *   Currently, filtering is only available on the patch_deployment field.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   */
  listPatchJobsAsync(
    request?: protos.google.cloud.osconfig.v1.IListPatchJobsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.cloud.osconfig.v1.IPatchJob> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listPatchJobs.asyncIterate(
      this.innerApiCalls['listPatchJobs'] as GaxCall,
      (request as unknown) as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.osconfig.v1.IPatchJob>;
  }
  listPatchJobInstanceDetails(
    request: protos.google.cloud.osconfig.v1.IListPatchJobInstanceDetailsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.osconfig.v1.IPatchJobInstanceDetails[],
      protos.google.cloud.osconfig.v1.IListPatchJobInstanceDetailsRequest | null,
      protos.google.cloud.osconfig.v1.IListPatchJobInstanceDetailsResponse
    ]
  >;
  listPatchJobInstanceDetails(
    request: protos.google.cloud.osconfig.v1.IListPatchJobInstanceDetailsRequest,
    options: gax.CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.osconfig.v1.IListPatchJobInstanceDetailsRequest,
      | protos.google.cloud.osconfig.v1.IListPatchJobInstanceDetailsResponse
      | null
      | undefined,
      protos.google.cloud.osconfig.v1.IPatchJobInstanceDetails
    >
  ): void;
  listPatchJobInstanceDetails(
    request: protos.google.cloud.osconfig.v1.IListPatchJobInstanceDetailsRequest,
    callback: PaginationCallback<
      protos.google.cloud.osconfig.v1.IListPatchJobInstanceDetailsRequest,
      | protos.google.cloud.osconfig.v1.IListPatchJobInstanceDetailsResponse
      | null
      | undefined,
      protos.google.cloud.osconfig.v1.IPatchJobInstanceDetails
    >
  ): void;
  /**
   * Get a list of instance details for a given patch job.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent for the instances are in the form of `projects/* /patchJobs/*`.
   * @param {number} request.pageSize
   *   The maximum number of instance details records to return.  Default is 100.
   * @param {string} request.pageToken
   *   A pagination token returned from a previous call
   *   that indicates where this listing should continue from.
   * @param {string} request.filter
   *   A filter expression that filters results listed in the response. This
   *   field supports filtering results by instance zone, name, state, or
   *   `failure_reason`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [PatchJobInstanceDetails]{@link google.cloud.osconfig.v1.PatchJobInstanceDetails}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [PatchJobInstanceDetails]{@link google.cloud.osconfig.v1.PatchJobInstanceDetails} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListPatchJobInstanceDetailsRequest]{@link google.cloud.osconfig.v1.ListPatchJobInstanceDetailsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListPatchJobInstanceDetailsResponse]{@link google.cloud.osconfig.v1.ListPatchJobInstanceDetailsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listPatchJobInstanceDetails(
    request: protos.google.cloud.osconfig.v1.IListPatchJobInstanceDetailsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | PaginationCallback<
          protos.google.cloud.osconfig.v1.IListPatchJobInstanceDetailsRequest,
          | protos.google.cloud.osconfig.v1.IListPatchJobInstanceDetailsResponse
          | null
          | undefined,
          protos.google.cloud.osconfig.v1.IPatchJobInstanceDetails
        >,
    callback?: PaginationCallback<
      protos.google.cloud.osconfig.v1.IListPatchJobInstanceDetailsRequest,
      | protos.google.cloud.osconfig.v1.IListPatchJobInstanceDetailsResponse
      | null
      | undefined,
      protos.google.cloud.osconfig.v1.IPatchJobInstanceDetails
    >
  ): Promise<
    [
      protos.google.cloud.osconfig.v1.IPatchJobInstanceDetails[],
      protos.google.cloud.osconfig.v1.IListPatchJobInstanceDetailsRequest | null,
      protos.google.cloud.osconfig.v1.IListPatchJobInstanceDetailsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listPatchJobInstanceDetails(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to {@link listPatchJobInstanceDetails}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listPatchJobInstanceDetails} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent for the instances are in the form of `projects/* /patchJobs/*`.
   * @param {number} request.pageSize
   *   The maximum number of instance details records to return.  Default is 100.
   * @param {string} request.pageToken
   *   A pagination token returned from a previous call
   *   that indicates where this listing should continue from.
   * @param {string} request.filter
   *   A filter expression that filters results listed in the response. This
   *   field supports filtering results by instance zone, name, state, or
   *   `failure_reason`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [PatchJobInstanceDetails]{@link google.cloud.osconfig.v1.PatchJobInstanceDetails} on 'data' event.
   */
  listPatchJobInstanceDetailsStream(
    request?: protos.google.cloud.osconfig.v1.IListPatchJobInstanceDetailsRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listPatchJobInstanceDetails.createStream(
      this.innerApiCalls.listPatchJobInstanceDetails as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to {@link listPatchJobInstanceDetails}, but returns an iterable object.
   *
   * for-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent for the instances are in the form of `projects/* /patchJobs/*`.
   * @param {number} request.pageSize
   *   The maximum number of instance details records to return.  Default is 100.
   * @param {string} request.pageToken
   *   A pagination token returned from a previous call
   *   that indicates where this listing should continue from.
   * @param {string} request.filter
   *   A filter expression that filters results listed in the response. This
   *   field supports filtering results by instance zone, name, state, or
   *   `failure_reason`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   */
  listPatchJobInstanceDetailsAsync(
    request?: protos.google.cloud.osconfig.v1.IListPatchJobInstanceDetailsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.cloud.osconfig.v1.IPatchJobInstanceDetails> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listPatchJobInstanceDetails.asyncIterate(
      this.innerApiCalls['listPatchJobInstanceDetails'] as GaxCall,
      (request as unknown) as RequestType,
      callSettings
    ) as AsyncIterable<
      protos.google.cloud.osconfig.v1.IPatchJobInstanceDetails
    >;
  }
  listPatchDeployments(
    request: protos.google.cloud.osconfig.v1.IListPatchDeploymentsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.osconfig.v1.IPatchDeployment[],
      protos.google.cloud.osconfig.v1.IListPatchDeploymentsRequest | null,
      protos.google.cloud.osconfig.v1.IListPatchDeploymentsResponse
    ]
  >;
  listPatchDeployments(
    request: protos.google.cloud.osconfig.v1.IListPatchDeploymentsRequest,
    options: gax.CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.osconfig.v1.IListPatchDeploymentsRequest,
      | protos.google.cloud.osconfig.v1.IListPatchDeploymentsResponse
      | null
      | undefined,
      protos.google.cloud.osconfig.v1.IPatchDeployment
    >
  ): void;
  listPatchDeployments(
    request: protos.google.cloud.osconfig.v1.IListPatchDeploymentsRequest,
    callback: PaginationCallback<
      protos.google.cloud.osconfig.v1.IListPatchDeploymentsRequest,
      | protos.google.cloud.osconfig.v1.IListPatchDeploymentsResponse
      | null
      | undefined,
      protos.google.cloud.osconfig.v1.IPatchDeployment
    >
  ): void;
  /**
   * Get a page of OS Config patch deployments.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the parent in the form `projects/*`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of patch deployments to return. Default is 100.
   * @param {string} [request.pageToken]
   *   Optional. A pagination token returned from a previous call to ListPatchDeployments
   *   that indicates where this listing should continue from.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [PatchDeployment]{@link google.cloud.osconfig.v1.PatchDeployment}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [PatchDeployment]{@link google.cloud.osconfig.v1.PatchDeployment} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListPatchDeploymentsRequest]{@link google.cloud.osconfig.v1.ListPatchDeploymentsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListPatchDeploymentsResponse]{@link google.cloud.osconfig.v1.ListPatchDeploymentsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listPatchDeployments(
    request: protos.google.cloud.osconfig.v1.IListPatchDeploymentsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | PaginationCallback<
          protos.google.cloud.osconfig.v1.IListPatchDeploymentsRequest,
          | protos.google.cloud.osconfig.v1.IListPatchDeploymentsResponse
          | null
          | undefined,
          protos.google.cloud.osconfig.v1.IPatchDeployment
        >,
    callback?: PaginationCallback<
      protos.google.cloud.osconfig.v1.IListPatchDeploymentsRequest,
      | protos.google.cloud.osconfig.v1.IListPatchDeploymentsResponse
      | null
      | undefined,
      protos.google.cloud.osconfig.v1.IPatchDeployment
    >
  ): Promise<
    [
      protos.google.cloud.osconfig.v1.IPatchDeployment[],
      protos.google.cloud.osconfig.v1.IListPatchDeploymentsRequest | null,
      protos.google.cloud.osconfig.v1.IListPatchDeploymentsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listPatchDeployments(request, options, callback);
  }

  /**
   * Equivalent to {@link listPatchDeployments}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listPatchDeployments} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the parent in the form `projects/*`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of patch deployments to return. Default is 100.
   * @param {string} [request.pageToken]
   *   Optional. A pagination token returned from a previous call to ListPatchDeployments
   *   that indicates where this listing should continue from.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [PatchDeployment]{@link google.cloud.osconfig.v1.PatchDeployment} on 'data' event.
   */
  listPatchDeploymentsStream(
    request?: protos.google.cloud.osconfig.v1.IListPatchDeploymentsRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listPatchDeployments.createStream(
      this.innerApiCalls.listPatchDeployments as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to {@link listPatchDeployments}, but returns an iterable object.
   *
   * for-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the parent in the form `projects/*`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of patch deployments to return. Default is 100.
   * @param {string} [request.pageToken]
   *   Optional. A pagination token returned from a previous call to ListPatchDeployments
   *   that indicates where this listing should continue from.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   */
  listPatchDeploymentsAsync(
    request?: protos.google.cloud.osconfig.v1.IListPatchDeploymentsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.cloud.osconfig.v1.IPatchDeployment> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listPatchDeployments.asyncIterate(
      this.innerApiCalls['listPatchDeployments'] as GaxCall,
      (request as unknown) as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.osconfig.v1.IPatchDeployment>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified patchDeployment resource name string.
   *
   * @param {string} project
   * @param {string} patch_deployment
   * @returns {string} Resource name string.
   */
  patchDeploymentPath(project: string, patchDeployment: string) {
    return this.pathTemplates.patchDeploymentPathTemplate.render({
      project: project,
      patch_deployment: patchDeployment,
    });
  }

  /**
   * Parse the project from PatchDeployment resource.
   *
   * @param {string} patchDeploymentName
   *   A fully-qualified path representing PatchDeployment resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPatchDeploymentName(patchDeploymentName: string) {
    return this.pathTemplates.patchDeploymentPathTemplate.match(
      patchDeploymentName
    ).project;
  }

  /**
   * Parse the patch_deployment from PatchDeployment resource.
   *
   * @param {string} patchDeploymentName
   *   A fully-qualified path representing PatchDeployment resource.
   * @returns {string} A string representing the patch_deployment.
   */
  matchPatchDeploymentFromPatchDeploymentName(patchDeploymentName: string) {
    return this.pathTemplates.patchDeploymentPathTemplate.match(
      patchDeploymentName
    ).patch_deployment;
  }

  /**
   * Return a fully-qualified patchJob resource name string.
   *
   * @param {string} project
   * @param {string} patch_job
   * @returns {string} Resource name string.
   */
  patchJobPath(project: string, patchJob: string) {
    return this.pathTemplates.patchJobPathTemplate.render({
      project: project,
      patch_job: patchJob,
    });
  }

  /**
   * Parse the project from PatchJob resource.
   *
   * @param {string} patchJobName
   *   A fully-qualified path representing PatchJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPatchJobName(patchJobName: string) {
    return this.pathTemplates.patchJobPathTemplate.match(patchJobName).project;
  }

  /**
   * Parse the patch_job from PatchJob resource.
   *
   * @param {string} patchJobName
   *   A fully-qualified path representing PatchJob resource.
   * @returns {string} A string representing the patch_job.
   */
  matchPatchJobFromPatchJobName(patchJobName: string) {
    return this.pathTemplates.patchJobPathTemplate.match(patchJobName)
      .patch_job;
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.osConfigServiceStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
