// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as osconfigzonalserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1alpha.OsConfigZonalServiceClient', () => {
    it('has servicePath', () => {
        const servicePath = osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        assert.strictEqual(client.osConfigZonalServiceStub, undefined);
        await client.initialize();
        assert(client.osConfigZonalServiceStub);
    });

    it('has close method', () => {
        const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('getOSPolicyAssignment', () => {
        it('invokes getOSPolicyAssignment without error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.GetOSPolicyAssignmentRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment());
            client.innerApiCalls.getOSPolicyAssignment = stubSimpleCall(expectedResponse);
            const [response] = await client.getOSPolicyAssignment(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getOSPolicyAssignment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getOSPolicyAssignment without error using callback', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.GetOSPolicyAssignmentRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment());
            client.innerApiCalls.getOSPolicyAssignment = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getOSPolicyAssignment(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignment|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getOSPolicyAssignment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getOSPolicyAssignment with error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.GetOSPolicyAssignmentRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getOSPolicyAssignment = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getOSPolicyAssignment(request), expectedError);
            assert((client.innerApiCalls.getOSPolicyAssignment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getInstanceOSPoliciesCompliance', () => {
        it('invokes getInstanceOSPoliciesCompliance without error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.GetInstanceOSPoliciesComplianceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance());
            client.innerApiCalls.getInstanceOSPoliciesCompliance = stubSimpleCall(expectedResponse);
            const [response] = await client.getInstanceOSPoliciesCompliance(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getInstanceOSPoliciesCompliance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getInstanceOSPoliciesCompliance without error using callback', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.GetInstanceOSPoliciesComplianceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance());
            client.innerApiCalls.getInstanceOSPoliciesCompliance = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getInstanceOSPoliciesCompliance(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.osconfig.v1alpha.IInstanceOSPoliciesCompliance|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getInstanceOSPoliciesCompliance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getInstanceOSPoliciesCompliance with error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.GetInstanceOSPoliciesComplianceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getInstanceOSPoliciesCompliance = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getInstanceOSPoliciesCompliance(request), expectedError);
            assert((client.innerApiCalls.getInstanceOSPoliciesCompliance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getInventory', () => {
        it('invokes getInventory without error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.GetInventoryRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.Inventory());
            client.innerApiCalls.getInventory = stubSimpleCall(expectedResponse);
            const [response] = await client.getInventory(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getInventory as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getInventory without error using callback', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.GetInventoryRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.Inventory());
            client.innerApiCalls.getInventory = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getInventory(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.osconfig.v1alpha.IInventory|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getInventory as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getInventory with error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.GetInventoryRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getInventory = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getInventory(request), expectedError);
            assert((client.innerApiCalls.getInventory as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getVulnerabilityReport', () => {
        it('invokes getVulnerabilityReport without error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.GetVulnerabilityReportRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport());
            client.innerApiCalls.getVulnerabilityReport = stubSimpleCall(expectedResponse);
            const [response] = await client.getVulnerabilityReport(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getVulnerabilityReport as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getVulnerabilityReport without error using callback', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.GetVulnerabilityReportRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport());
            client.innerApiCalls.getVulnerabilityReport = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getVulnerabilityReport(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.osconfig.v1alpha.IVulnerabilityReport|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getVulnerabilityReport as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getVulnerabilityReport with error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.GetVulnerabilityReportRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getVulnerabilityReport = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getVulnerabilityReport(request), expectedError);
            assert((client.innerApiCalls.getVulnerabilityReport as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createOSPolicyAssignment', () => {
        it('invokes createOSPolicyAssignment without error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.CreateOSPolicyAssignmentRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createOSPolicyAssignment = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createOSPolicyAssignment(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createOSPolicyAssignment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createOSPolicyAssignment without error using callback', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.CreateOSPolicyAssignmentRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createOSPolicyAssignment = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createOSPolicyAssignment(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignment, protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignmentOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignment, protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignmentOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createOSPolicyAssignment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createOSPolicyAssignment with call error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.CreateOSPolicyAssignmentRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createOSPolicyAssignment = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createOSPolicyAssignment(request), expectedError);
            assert((client.innerApiCalls.createOSPolicyAssignment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createOSPolicyAssignment with LRO error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.CreateOSPolicyAssignmentRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createOSPolicyAssignment = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createOSPolicyAssignment(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createOSPolicyAssignment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateOSPolicyAssignmentProgress without error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateOSPolicyAssignmentProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateOSPolicyAssignmentProgress with error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateOSPolicyAssignmentProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateOSPolicyAssignment', () => {
        it('invokes updateOSPolicyAssignment without error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.UpdateOSPolicyAssignmentRequest());
            request.osPolicyAssignment = {};
            request.osPolicyAssignment.name = '';
            const expectedHeaderRequestParams = "os_policy_assignment.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateOSPolicyAssignment = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateOSPolicyAssignment(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateOSPolicyAssignment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateOSPolicyAssignment without error using callback', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.UpdateOSPolicyAssignmentRequest());
            request.osPolicyAssignment = {};
            request.osPolicyAssignment.name = '';
            const expectedHeaderRequestParams = "os_policy_assignment.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateOSPolicyAssignment = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateOSPolicyAssignment(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignment, protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignmentOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignment, protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignmentOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateOSPolicyAssignment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateOSPolicyAssignment with call error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.UpdateOSPolicyAssignmentRequest());
            request.osPolicyAssignment = {};
            request.osPolicyAssignment.name = '';
            const expectedHeaderRequestParams = "os_policy_assignment.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateOSPolicyAssignment = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateOSPolicyAssignment(request), expectedError);
            assert((client.innerApiCalls.updateOSPolicyAssignment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateOSPolicyAssignment with LRO error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.UpdateOSPolicyAssignmentRequest());
            request.osPolicyAssignment = {};
            request.osPolicyAssignment.name = '';
            const expectedHeaderRequestParams = "os_policy_assignment.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateOSPolicyAssignment = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateOSPolicyAssignment(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.updateOSPolicyAssignment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkUpdateOSPolicyAssignmentProgress without error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateOSPolicyAssignmentProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateOSPolicyAssignmentProgress with error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateOSPolicyAssignmentProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteOSPolicyAssignment', () => {
        it('invokes deleteOSPolicyAssignment without error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.DeleteOSPolicyAssignmentRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteOSPolicyAssignment = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteOSPolicyAssignment(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteOSPolicyAssignment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteOSPolicyAssignment without error using callback', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.DeleteOSPolicyAssignmentRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteOSPolicyAssignment = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteOSPolicyAssignment(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignmentOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignmentOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteOSPolicyAssignment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteOSPolicyAssignment with call error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.DeleteOSPolicyAssignmentRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteOSPolicyAssignment = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteOSPolicyAssignment(request), expectedError);
            assert((client.innerApiCalls.deleteOSPolicyAssignment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteOSPolicyAssignment with LRO error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.DeleteOSPolicyAssignmentRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteOSPolicyAssignment = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteOSPolicyAssignment(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.deleteOSPolicyAssignment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkDeleteOSPolicyAssignmentProgress without error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteOSPolicyAssignmentProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteOSPolicyAssignmentProgress with error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteOSPolicyAssignmentProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listOSPolicyAssignments', () => {
        it('invokes listOSPolicyAssignments without error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()),
            ];
            client.innerApiCalls.listOSPolicyAssignments = stubSimpleCall(expectedResponse);
            const [response] = await client.listOSPolicyAssignments(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listOSPolicyAssignments as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listOSPolicyAssignments without error using callback', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()),
            ];
            client.innerApiCalls.listOSPolicyAssignments = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listOSPolicyAssignments(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignment[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listOSPolicyAssignments as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listOSPolicyAssignments with error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listOSPolicyAssignments = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listOSPolicyAssignments(request), expectedError);
            assert((client.innerApiCalls.listOSPolicyAssignments as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listOSPolicyAssignmentsStream without error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()),
            ];
            client.descriptors.page.listOSPolicyAssignments.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listOSPolicyAssignmentsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment[] = [];
                stream.on('data', (response: protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listOSPolicyAssignments.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listOSPolicyAssignments, request));
            assert.strictEqual(
                (client.descriptors.page.listOSPolicyAssignments.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listOSPolicyAssignmentsStream with error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listOSPolicyAssignments.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listOSPolicyAssignmentsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment[] = [];
                stream.on('data', (response: protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listOSPolicyAssignments.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listOSPolicyAssignments, request));
            assert.strictEqual(
                (client.descriptors.page.listOSPolicyAssignments.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listOSPolicyAssignments without error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()),
            ];
            client.descriptors.page.listOSPolicyAssignments.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignment[] = [];
            const iterable = client.listOSPolicyAssignmentsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listOSPolicyAssignments.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listOSPolicyAssignments.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listOSPolicyAssignments with error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listOSPolicyAssignments.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listOSPolicyAssignmentsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignment[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listOSPolicyAssignments.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listOSPolicyAssignments.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listOSPolicyAssignmentRevisions', () => {
        it('invokes listOSPolicyAssignmentRevisions without error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentRevisionsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()),
            ];
            client.innerApiCalls.listOSPolicyAssignmentRevisions = stubSimpleCall(expectedResponse);
            const [response] = await client.listOSPolicyAssignmentRevisions(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listOSPolicyAssignmentRevisions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listOSPolicyAssignmentRevisions without error using callback', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentRevisionsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()),
            ];
            client.innerApiCalls.listOSPolicyAssignmentRevisions = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listOSPolicyAssignmentRevisions(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignment[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listOSPolicyAssignmentRevisions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listOSPolicyAssignmentRevisions with error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentRevisionsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listOSPolicyAssignmentRevisions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listOSPolicyAssignmentRevisions(request), expectedError);
            assert((client.innerApiCalls.listOSPolicyAssignmentRevisions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listOSPolicyAssignmentRevisionsStream without error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentRevisionsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()),
            ];
            client.descriptors.page.listOSPolicyAssignmentRevisions.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listOSPolicyAssignmentRevisionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment[] = [];
                stream.on('data', (response: protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listOSPolicyAssignmentRevisions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listOSPolicyAssignmentRevisions, request));
            assert.strictEqual(
                (client.descriptors.page.listOSPolicyAssignmentRevisions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listOSPolicyAssignmentRevisionsStream with error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentRevisionsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedError = new Error('expected');
            client.descriptors.page.listOSPolicyAssignmentRevisions.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listOSPolicyAssignmentRevisionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment[] = [];
                stream.on('data', (response: protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listOSPolicyAssignmentRevisions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listOSPolicyAssignmentRevisions, request));
            assert.strictEqual(
                (client.descriptors.page.listOSPolicyAssignmentRevisions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listOSPolicyAssignmentRevisions without error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentRevisionsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.OSPolicyAssignment()),
            ];
            client.descriptors.page.listOSPolicyAssignmentRevisions.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignment[] = [];
            const iterable = client.listOSPolicyAssignmentRevisionsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listOSPolicyAssignmentRevisions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listOSPolicyAssignmentRevisions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listOSPolicyAssignmentRevisions with error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListOSPolicyAssignmentRevisionsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";const expectedError = new Error('expected');
            client.descriptors.page.listOSPolicyAssignmentRevisions.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listOSPolicyAssignmentRevisionsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.osconfig.v1alpha.IOSPolicyAssignment[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listOSPolicyAssignmentRevisions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listOSPolicyAssignmentRevisions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listInstanceOSPoliciesCompliances', () => {
        it('invokes listInstanceOSPoliciesCompliances without error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListInstanceOSPoliciesCompliancesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()),
            ];
            client.innerApiCalls.listInstanceOSPoliciesCompliances = stubSimpleCall(expectedResponse);
            const [response] = await client.listInstanceOSPoliciesCompliances(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listInstanceOSPoliciesCompliances as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listInstanceOSPoliciesCompliances without error using callback', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListInstanceOSPoliciesCompliancesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()),
            ];
            client.innerApiCalls.listInstanceOSPoliciesCompliances = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listInstanceOSPoliciesCompliances(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.osconfig.v1alpha.IInstanceOSPoliciesCompliance[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listInstanceOSPoliciesCompliances as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listInstanceOSPoliciesCompliances with error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListInstanceOSPoliciesCompliancesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listInstanceOSPoliciesCompliances = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listInstanceOSPoliciesCompliances(request), expectedError);
            assert((client.innerApiCalls.listInstanceOSPoliciesCompliances as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listInstanceOSPoliciesCompliancesStream without error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListInstanceOSPoliciesCompliancesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()),
            ];
            client.descriptors.page.listInstanceOSPoliciesCompliances.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listInstanceOSPoliciesCompliancesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance[] = [];
                stream.on('data', (response: protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listInstanceOSPoliciesCompliances.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listInstanceOSPoliciesCompliances, request));
            assert.strictEqual(
                (client.descriptors.page.listInstanceOSPoliciesCompliances.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listInstanceOSPoliciesCompliancesStream with error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListInstanceOSPoliciesCompliancesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listInstanceOSPoliciesCompliances.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listInstanceOSPoliciesCompliancesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance[] = [];
                stream.on('data', (response: protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listInstanceOSPoliciesCompliances.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listInstanceOSPoliciesCompliances, request));
            assert.strictEqual(
                (client.descriptors.page.listInstanceOSPoliciesCompliances.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listInstanceOSPoliciesCompliances without error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListInstanceOSPoliciesCompliancesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.InstanceOSPoliciesCompliance()),
            ];
            client.descriptors.page.listInstanceOSPoliciesCompliances.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.osconfig.v1alpha.IInstanceOSPoliciesCompliance[] = [];
            const iterable = client.listInstanceOSPoliciesCompliancesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listInstanceOSPoliciesCompliances.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listInstanceOSPoliciesCompliances.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listInstanceOSPoliciesCompliances with error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListInstanceOSPoliciesCompliancesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listInstanceOSPoliciesCompliances.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listInstanceOSPoliciesCompliancesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.osconfig.v1alpha.IInstanceOSPoliciesCompliance[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listInstanceOSPoliciesCompliances.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listInstanceOSPoliciesCompliances.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listInventories', () => {
        it('invokes listInventories without error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListInventoriesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.Inventory()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.Inventory()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.Inventory()),
            ];
            client.innerApiCalls.listInventories = stubSimpleCall(expectedResponse);
            const [response] = await client.listInventories(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listInventories as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listInventories without error using callback', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListInventoriesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.Inventory()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.Inventory()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.Inventory()),
            ];
            client.innerApiCalls.listInventories = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listInventories(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.osconfig.v1alpha.IInventory[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listInventories as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listInventories with error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListInventoriesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listInventories = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listInventories(request), expectedError);
            assert((client.innerApiCalls.listInventories as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listInventoriesStream without error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListInventoriesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.Inventory()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.Inventory()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.Inventory()),
            ];
            client.descriptors.page.listInventories.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listInventoriesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.osconfig.v1alpha.Inventory[] = [];
                stream.on('data', (response: protos.google.cloud.osconfig.v1alpha.Inventory) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listInventories.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listInventories, request));
            assert.strictEqual(
                (client.descriptors.page.listInventories.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listInventoriesStream with error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListInventoriesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listInventories.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listInventoriesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.osconfig.v1alpha.Inventory[] = [];
                stream.on('data', (response: protos.google.cloud.osconfig.v1alpha.Inventory) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listInventories.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listInventories, request));
            assert.strictEqual(
                (client.descriptors.page.listInventories.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listInventories without error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListInventoriesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.Inventory()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.Inventory()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.Inventory()),
            ];
            client.descriptors.page.listInventories.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.osconfig.v1alpha.IInventory[] = [];
            const iterable = client.listInventoriesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listInventories.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listInventories.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listInventories with error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListInventoriesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listInventories.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listInventoriesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.osconfig.v1alpha.IInventory[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listInventories.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listInventories.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listVulnerabilityReports', () => {
        it('invokes listVulnerabilityReports without error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListVulnerabilityReportsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()),
            ];
            client.innerApiCalls.listVulnerabilityReports = stubSimpleCall(expectedResponse);
            const [response] = await client.listVulnerabilityReports(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listVulnerabilityReports as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listVulnerabilityReports without error using callback', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListVulnerabilityReportsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()),
            ];
            client.innerApiCalls.listVulnerabilityReports = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listVulnerabilityReports(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.osconfig.v1alpha.IVulnerabilityReport[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listVulnerabilityReports as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listVulnerabilityReports with error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListVulnerabilityReportsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listVulnerabilityReports = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listVulnerabilityReports(request), expectedError);
            assert((client.innerApiCalls.listVulnerabilityReports as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listVulnerabilityReportsStream without error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListVulnerabilityReportsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()),
            ];
            client.descriptors.page.listVulnerabilityReports.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listVulnerabilityReportsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.osconfig.v1alpha.VulnerabilityReport[] = [];
                stream.on('data', (response: protos.google.cloud.osconfig.v1alpha.VulnerabilityReport) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listVulnerabilityReports.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listVulnerabilityReports, request));
            assert.strictEqual(
                (client.descriptors.page.listVulnerabilityReports.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listVulnerabilityReportsStream with error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListVulnerabilityReportsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listVulnerabilityReports.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listVulnerabilityReportsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.osconfig.v1alpha.VulnerabilityReport[] = [];
                stream.on('data', (response: protos.google.cloud.osconfig.v1alpha.VulnerabilityReport) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listVulnerabilityReports.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listVulnerabilityReports, request));
            assert.strictEqual(
                (client.descriptors.page.listVulnerabilityReports.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listVulnerabilityReports without error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListVulnerabilityReportsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()),
              generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.VulnerabilityReport()),
            ];
            client.descriptors.page.listVulnerabilityReports.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.osconfig.v1alpha.IVulnerabilityReport[] = [];
            const iterable = client.listVulnerabilityReportsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listVulnerabilityReports.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listVulnerabilityReports.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listVulnerabilityReports with error', async () => {
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.osconfig.v1alpha.ListVulnerabilityReportsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listVulnerabilityReports.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listVulnerabilityReportsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.osconfig.v1alpha.IVulnerabilityReport[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listVulnerabilityReports.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listVulnerabilityReports.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('Path templates', () => {

        describe('instanceOSPoliciesCompliance', () => {
            const fakePath = "/rendered/path/instanceOSPoliciesCompliance";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                instance: "instanceValue",
            };
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.instanceOSPoliciesCompliancePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.instanceOSPoliciesCompliancePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('instanceOSPoliciesCompliancePath', () => {
                const result = client.instanceOSPoliciesCompliancePath("projectValue", "locationValue", "instanceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.instanceOSPoliciesCompliancePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromInstanceOSPoliciesComplianceName', () => {
                const result = client.matchProjectFromInstanceOSPoliciesComplianceName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.instanceOSPoliciesCompliancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromInstanceOSPoliciesComplianceName', () => {
                const result = client.matchLocationFromInstanceOSPoliciesComplianceName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.instanceOSPoliciesCompliancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInstanceFromInstanceOSPoliciesComplianceName', () => {
                const result = client.matchInstanceFromInstanceOSPoliciesComplianceName(fakePath);
                assert.strictEqual(result, "instanceValue");
                assert((client.pathTemplates.instanceOSPoliciesCompliancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('inventory', () => {
            const fakePath = "/rendered/path/inventory";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                instance: "instanceValue",
            };
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.inventoryPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.inventoryPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('inventoryPath', () => {
                const result = client.inventoryPath("projectValue", "locationValue", "instanceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.inventoryPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromInventoryName', () => {
                const result = client.matchProjectFromInventoryName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.inventoryPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromInventoryName', () => {
                const result = client.matchLocationFromInventoryName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.inventoryPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInstanceFromInventoryName', () => {
                const result = client.matchInstanceFromInventoryName(fakePath);
                assert.strictEqual(result, "instanceValue");
                assert((client.pathTemplates.inventoryPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('oSPolicyAssignment', () => {
            const fakePath = "/rendered/path/oSPolicyAssignment";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                os_policy_assignment: "osPolicyAssignmentValue",
            };
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.oSPolicyAssignmentPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.oSPolicyAssignmentPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('oSPolicyAssignmentPath', () => {
                const result = client.oSPolicyAssignmentPath("projectValue", "locationValue", "osPolicyAssignmentValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.oSPolicyAssignmentPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromOSPolicyAssignmentName', () => {
                const result = client.matchProjectFromOSPolicyAssignmentName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.oSPolicyAssignmentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromOSPolicyAssignmentName', () => {
                const result = client.matchLocationFromOSPolicyAssignmentName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.oSPolicyAssignmentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchOsPolicyAssignmentFromOSPolicyAssignmentName', () => {
                const result = client.matchOsPolicyAssignmentFromOSPolicyAssignmentName(fakePath);
                assert.strictEqual(result, "osPolicyAssignmentValue");
                assert((client.pathTemplates.oSPolicyAssignmentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('vulnerabilityReport', () => {
            const fakePath = "/rendered/path/vulnerabilityReport";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                instance: "instanceValue",
            };
            const client = new osconfigzonalserviceModule.v1alpha.OsConfigZonalServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.vulnerabilityReportPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.vulnerabilityReportPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('vulnerabilityReportPath', () => {
                const result = client.vulnerabilityReportPath("projectValue", "locationValue", "instanceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.vulnerabilityReportPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromVulnerabilityReportName', () => {
                const result = client.matchProjectFromVulnerabilityReportName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.vulnerabilityReportPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromVulnerabilityReportName', () => {
                const result = client.matchLocationFromVulnerabilityReportName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.vulnerabilityReportPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInstanceFromVulnerabilityReportName', () => {
                const result = client.matchInstanceFromVulnerabilityReportName(fakePath);
                assert.strictEqual(result, "instanceValue");
                assert((client.pathTemplates.vulnerabilityReportPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
